package br.itecbrazil.orcamento.client.apresentacao;

import br.itecbrazil.orcamento.client.geral.FuncoesSystem;
import br.itecbrazil.orcamento.entidade.CampanhaProdutoBrinde;
import br.itecbrazil.orcamento.client.offline.services.ServicoAdapter;
import br.itecbrazil.orcamento.entidade.CampanhaPromocional;
import br.itecbrazil.orcamento.entidade.CampanhaPromocionalProdutoPontuacao;
import br.itecbrazil.orcamento.entidade.CampanhaPromocionalProdutoQtde;
import br.itecbrazil.orcamento.entidade.tables.TableCampanhaProduto;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.List;
import java.awt.Window;
import java.math.BigDecimal;
import java.util.Collection;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Wanderson
 */
public class TelaProdutosBrinde extends WindowModal implements KeyListener {

    public final CampanhaPromocional campanhaPromocional;
    private final Object[] options = {"Sim", "Não"};
    private CampanhaProdutoBrinde encontrado = null;

    private final ServicoAdapter servico = RegistryOrcamento.getServico();

    /**
     * Creates new form TelaProdutosBrinde
     *
     * @param owner
     * @param campanhaPromocional
     */
    public TelaProdutosBrinde(Window owner, CampanhaPromocional campanhaPromocional) {
        super(owner, "");
        initComponents();
        //super.setModal(true);

        super.limparCampos();
        super.ativarSelecaoValor();
        super.ativarEnter();
        ImageIcon icon;
        try {
            icon = new ImageIcon(this.getClass().getResource("/br/itecbrazil/orcamento/client/resources/icones/itec.png"));
            this.setIconImage(icon.getImage());
        } catch (Exception e) {
        }
        this.campanhaPromocional = campanhaPromocional;

        this.setLocationRelativeTo(null);
        carregaProduto();
        jTblProduto.grabFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTblProduto = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLblInformacao = new javax.swing.JLabel();
        jTextCodigo = new javax.swing.JTextField();
        jTextQuantidade = new javax.swing.JTextField();
        jLabelProduto = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Relação de produtos de campanhas promocionais");
        setResizable(false);

        jTblProduto.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTblProduto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTblProduto.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jTblProduto.getTableHeader().setReorderingAllowed(false);
        jTblProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTblProdutoKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTblProduto);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton1.setText("Aceitar Produto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(102, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Cliente tem direito de levar qualquer um dos produtos relacionados abaixo pelo seu valor correspondente");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton2.setText("Não Aceitar Produto");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLblInformacao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLblInformacao.setForeground(new java.awt.Color(0, 51, 0));

        jTextCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextCodigoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextCodigoFocusLost(evt);
            }
        });
        jTextCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextCodigoKeyPressed(evt);
            }
        });

        jTextQuantidade.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextQuantidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextQuantidadeFocusGained(evt);
            }
        });
        jTextQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextQuantidadeActionPerformed(evt);
            }
        });
        jTextQuantidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextQuantidadeKeyPressed(evt);
            }
        });

        jLabel3.setText("Código:");

        jLabel4.setText("Quantidade");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLblInformacao, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextCodigo)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4))
                    .addComponent(jLabelProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(jButton1))
                    .addComponent(jLblInformacao, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(905, 456));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (campanhaPromocional.getQtdeUtilizado() == 0 || campanhaPromocional.getQtdeDisponivel() < 0) {
            JOptionPane.showMessageDialog(this, "Nenhum produto selecionado ou qtde superior ao disponpível!\nSelecione para proseguir.");
            return;
        }

        if (campanhaPromocional.getQtdeDisponivel() > 0) {
            int i = JOptionPane.showOptionDialog(this,
                    String.format("Cliente ainda tem direito a mais %s itens\nDeseja incluir mais itens", campanhaPromocional.getQtdeDisponivel()), "Atenção",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            if (i == JOptionPane.YES_OPTION) {
                return;
            }
            
        }
        int i = JOptionPane.showOptionDialog(this,
                String.format("Confirmar %s brinde(s) adiquiridos", campanhaPromocional.getQtdeAdquirida()), "Atenção",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (i == JOptionPane.YES_OPTION) {
            this.dispose();
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        campanhaPromocional.ignorar();

        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTblProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTblProdutoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jButton1.doClick();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_jTblProdutoKeyPressed

    private void jTextQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextQuantidadeActionPerformed
        TableCampanhaProduto produtosBrindes = (TableCampanhaProduto) jTblProduto.getModel();
        if(!jTextQuantidade.getText().equals("")){
            encontrado.setQtdeInformada(Integer.parseInt(jTextQuantidade.getText()));
            encontrado.setQtdeAdquirdo(encontrado.getQtdeInformada() * encontrado.getQtde());
            produtosBrindes.update(encontrado);
        }else{
            if(encontrado != null){
                encontrado.setQtdeInformada(0);
                encontrado.setQtdeAdquirdo(encontrado.getQtdeInformada() * encontrado.getQtde());

                produtosBrindes.update(encontrado);
            }
        }

    }//GEN-LAST:event_jTextQuantidadeActionPerformed

    private void jTextCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextCodigoFocusLost
        if (!("").equals(jTextCodigo.getText())) {
            buscaProdutoLista();
        }
    }//GEN-LAST:event_jTextCodigoFocusLost

    private void jTextCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextCodigoKeyPressed
        if (FuncoesSystem.isKeyPressedEnterOrTab(evt)) {

            jTextQuantidade.requestFocus();

        }
    }//GEN-LAST:event_jTextCodigoKeyPressed

    private void jTextQuantidadeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextQuantidadeFocusGained

    }//GEN-LAST:event_jTextQuantidadeFocusGained

    private void jTextCodigoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextCodigoFocusGained

    }//GEN-LAST:event_jTextCodigoFocusGained

    private void jTextQuantidadeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextQuantidadeKeyPressed
        if (FuncoesSystem.isKeyPressedEnterOrTab(evt)) {

            TableCampanhaProduto produtosBrindes = (TableCampanhaProduto) jTblProduto.getModel();
            
            encontrado.setQtdeInformada(Integer.parseInt(jTextQuantidade.getText()));
            encontrado.setQtdeAdquirdo(encontrado.getQtdeInformada() * encontrado.getQtde());
            
            //validação refeita com lógica inversa
            if(campanhaPromocional.getQtdeDisponivel() < (encontrado.getQtdeAdquirdo()/encontrado.getQtde())){
                String msg = String.format("Quantidade selecionada maior do que a disponível.\nLimite maximo: %s", campanhaPromocional.getQtdeDisponivel());
                JOptionPane.showMessageDialog(this, msg, "Atenção", JOptionPane.INFORMATION_MESSAGE);
                //jTextQuantidade.setText(String.valueOf(campanhaPromocional.getQtdeDisponivel()));
                encontrado.setQtdeAdquirdo(0);
                jTextQuantidade.setText("");
                
            }else if (validaQuantidade(encontrado)/*campanhaPromocional.getQtdeDisponivel() < (encontrado.getQtdeAdquirdo()/encontrado.getQtde())*/) {
                produtosBrindes.update(encontrado);

                JOptionPane.showMessageDialog(this, "Brinde adicionado com sucesso!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                encontrado = null;
                jTextQuantidade.setText("");
                jTextCodigo.setText("");
                jLabelProduto.setText("");
                jTextCodigo.requestFocus();

            }
        }
    }//GEN-LAST:event_jTextQuantidadeKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelProduto;
    private javax.swing.JLabel jLblInformacao;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTblProduto;
    private javax.swing.JTextField jTextCodigo;
    private javax.swing.JTextField jTextQuantidade;
    // End of variables declaration//GEN-END:variables

// <editor-fold defaultstate="collapsed" desc="Metodos publicos para retorno">
    public CampanhaProdutoBrinde getPbs() {
        if (campanhaPromocional.getProdutosBrindeAdquirido().size() > 0) {
            return campanhaPromocional.getProdutosBrindeAdquirido().iterator().next();
        }
        return null;
    }

    public List<CampanhaProdutoBrinde> getPbses() {
        return (List<CampanhaProdutoBrinde>) campanhaPromocional.getProdutosBrindeAdquirido();
    }
// </editor-fold>

    @Override
    public void keyPressed(KeyEvent ek) {
        if (ek.getKeyCode() == KeyEvent.VK_ESCAPE) {
//            JOptionPane.showMessageDialog(this,
//                    "Selecionar uma das opções disponíveis.", "Atenção", JOptionPane.INFORMATION_MESSAGE);
        }

    }

    private void carregaProduto() {
        //DefaultTableModel modelo = Utils.clearTable(jTblProduto);
        TableCampanhaProduto tableCampanhaProduto = new TableCampanhaProduto(campanhaPromocional.getQtdeDisponivel());
        tableCampanhaProduto.addTableModelListener(new TableModelListenerImpl());

        jTblProduto.setModel(tableCampanhaProduto);

        Collection<CampanhaProdutoBrinde> produtosBrindes = campanhaPromocional.getProdutosBrindes();
        for (CampanhaProdutoBrinde cpb : produtosBrindes) {
            CampanhaProdutoBrinde clone = cpb.clone();
            if (campanhaPromocional.getProdutosBrindeAdquirido().contains(clone)) {
                List<CampanhaProdutoBrinde> t = (List<CampanhaProdutoBrinde>) campanhaPromocional.getProdutosBrindeAdquirido();
                clone.setQtdeAdquirdo(t.get(t.indexOf(clone)).getQtdeAdquirdo());
                clone.setQtdeInformada(t.get(t.indexOf(clone)).getQtdeInformada());
            }
            tableCampanhaProduto.add(clone);
        }

//        Collection<CampanhaProdutoBrinde> selectionados = campanhaPromocional.getProdutosBrindeAdquirido();
//        for (CampanhaProdutoBrinde cpb : selectionados) {
//            if (tableCampanhaProduto.isExists(cpb)) {
//                tableCampanhaProduto.get(cpb).setQtdeAdquirdo(cpb.getQtdeAdquirdo());
//                tableCampanhaProduto.render();
//            }
//        }
        DefaultTableCellRenderer rendererDireita = new DefaultTableCellRenderer();
        rendererDireita.setHorizontalAlignment(SwingConstants.RIGHT);

        jTblProduto.getColumnModel().getColumn(0).setCellRenderer(rendererDireita);
        jTblProduto.getColumnModel().getColumn(2).setCellRenderer(rendererDireita);

        jTblProduto.getColumnModel().getColumn(3).setPreferredWidth(60);
        jTblProduto.getColumnModel().getColumn(3).setMaxWidth(60);
        jTblProduto.getColumnModel().getColumn(3).setMinWidth(60);
        jTblProduto.getColumnModel().getColumn(4).setPreferredWidth(60);
        jTblProduto.getColumnModel().getColumn(4).setMaxWidth(60);
        jTblProduto.getColumnModel().getColumn(4).setMinWidth(60);

        doDefineTipoCampanha();

    }

    private boolean validaQuantidade(CampanhaProdutoBrinde pbs) {
        if (pbs.getQtdeAdquirdo() > 0) {
            if (campanhaPromocional instanceof CampanhaPromocionalProdutoPontuacao) {
                return campanhaPromocional.getQtdeDisponivel() >= pbs.getQtdePontos().multiply(new BigDecimal(pbs.getQtdeAdquirdo())).intValue();
            } else {
                return campanhaPromocional.getQtdeDisponivel() >= (pbs.getQtdeAdquirdo() / pbs.getQtde());
            }
        } else {
            return false;
        }
    }

    public boolean isValidOpenner() {

        if (campanhaPromocional.isValida()) {
            return jTblProduto.getRowCount() > 0;
        }

        return false;

    }

    private void doDefineTipoCampanha() {

        if (campanhaPromocional instanceof CampanhaPromocionalProdutoPontuacao) {
            jLblInformacao.setText(String.format("Campanha por pontuação [Pontos adquiridos %s utilizados %s saldo %s]", campanhaPromocional.getQtdeAdquirida(), campanhaPromocional.getQtdeUtilizado(), campanhaPromocional.getQtdeDisponivel()));
        } else if (campanhaPromocional instanceof CampanhaPromocionalProdutoQtde) {
            jLblInformacao.setText(String.format("Campanha por aquisição de produto [Produtos adquiridos %s utilizados %s saldo %s]", campanhaPromocional.getQtdeAdquirida(), campanhaPromocional.getQtdeUtilizado(), campanhaPromocional.getQtdeDisponivel()));
        } else {
            jLblInformacao.setText(String.format("Campanha por aquisição de produto de uma família [Produtos adquiridos %s utilizados %s saldo %s]", campanhaPromocional.getQtdeAdquirida(), campanhaPromocional.getQtdeUtilizado(), campanhaPromocional.getQtdeDisponivel()));
        }

    }

    private class TableModelListenerImpl implements TableModelListener {

        public TableModelListenerImpl() {
        }

        @Override
        public void tableChanged(TableModelEvent e) {
            //campanhaPromocional.getProdutosBrindeAdquirido().add(null);
            TableCampanhaProduto tcp = (TableCampanhaProduto) e.getSource();
            CampanhaProdutoBrinde brinde = tcp.get(e.getFirstRow());
            campanhaPromocional.getProdutosBrindeAdquirido().remove(brinde);

            if (brinde.getQtdeAdquirdo() > 0) {
                if (validaQuantidade(brinde)) {
                    campanhaPromocional.getProdutosBrindeAdquirido().add(brinde);
                } else if (campanhaPromocional.getQtdeDisponivel() > 0) {
                    //brinde.setQtdeAdquirdo(campanhaPromocional.getQtdeAdquirida());
                    campanhaPromocional.getProdutosBrindeAdquirido().add(brinde);
                } else {
                    brinde.setQtdeAdquirdo(0);
                }
            }

            doDefineTipoCampanha();
            encontrado = null;
            jTextQuantidade.setText("");
            jTextCodigo.setText("");
            jLabelProduto.setText("");
            jTextCodigo.requestFocus();

        }
    }

    private void buscaProdutoLista() {

        TableCampanhaProduto produtosBrindes = (TableCampanhaProduto) jTblProduto.getModel();

        for (CampanhaProdutoBrinde cpb : produtosBrindes.getAll()) {
            if ((String.valueOf(cpb.getCdBarra())).equals(jTextCodigo.getText()) || (String.valueOf(cpb.getCdProd())).equals(jTextCodigo.getText())) {

                jLabelProduto.setText(cpb.getDescProd());
                encontrado = cpb;
                jTextQuantidade.requestFocus();
                return;
            }

        }
        JOptionPane.showMessageDialog(this, "Produto não encontrado na lista de brindes", "Atenção", JOptionPane.INFORMATION_MESSAGE);
        encontrado = null;
        jLabelProduto.setText("");
        jTextCodigo.setText("");
        jTextCodigo.requestFocus();
    }

}
//Saldo de pontos para troca = 
